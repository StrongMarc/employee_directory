{"version":3,"sources":["components/Jumbotron.js","components/SearchForm.js","components/ResultList.js","utils/API.js","components/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["styles","jumbotronStyle","background","textAlign","Jumbotron","className","style","SearchForm","props","htmlFor","name","type","placeholder","id","value","search","onChange","handleInputChange","tableStyle","rowStyle","justifyContent","marginTop","buttonStyle","border","ResultList","scope","onClick","sortName","results","map","result","key","alt","first","src","picture","medium","last","phone","email","dob","date","slice","query","axios","get","EmployeeContainer","state","copyResults","searchEmployees","API","then","res","setState","data","catch","err","console","log","event","target","employee","filter","toLowerCase","includes","sort","a","b","localeCompare","unsort","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7b561af6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// https://github.com/why-jay/center-aligning-jumbotron/blob/master/index.jsx\r\nconst styles = {\r\n  jumbotronStyle: {\r\n    background: \"LightSeaGreen\",\r\n    textAlign: 'center',\r\n  }\r\n};\r\n\r\nfunction Jumbotron() {\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"jumbotron\" style={styles.jumbotronStyle}>\r\n        <h1 className=\"display-4\">Employee Directory</h1>\r\n        <p className=\"lead\">Search or filter by name.</p>\r\n      </header>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\n\nfunction SearchForm(props) {\n  // console.log(props)\n  \n  // if (props.search.length>0) {\n  //   console.log(props.search[0].gender)\n  // }\n  \n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for a Gif\"\n          id=\"search\"\n          value={props.search}\n          onChange={props.handleInputChange}\n        />\n        {/* <h3>Type {employeeName}</h3> */}\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\nimport \"./style.css\";\n\n// https://www.youtube.com/watch?v=j5P9FHiBVNo for inline\nconst tableStyle = {\n  textAlign: 'center',\n};\n\nconst rowStyle = {\n  justifyContent: 'center',\n  marginTop: '10px'\n};\n\n// https://stackoverflow.com/questions/11497094/remove-border-from-buttons/11497126\nconst buttonStyle = {\n  border: 'none',\n  background: 'none'\n};\n\nfunction ResultList(props) {\n  // console.log(props)\n  // console.log(props.results)\n  // https://dev.to/abdulbasit313/an-easy-way-to-create-a-customize-dynamic-table-in-react-js-3igg\n  // https://mdbootstrap.com/docs/react/utilities/vertical-align/\n  return (\n    <div className=\"container\">\n      \n      <table className=\"table table-striped\" style={tableStyle}>\n        <thead>\n          <tr>\n            <th scope=\"col\">Image</th>\n            <th scope=\"col\">\n              <button className=\"sort\" style={buttonStyle} onClick={props.sortName}>Name</button>\n            </th>\n            <th scope=\"col\">Phone</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">DOB</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.results.map(result => (\n              <tr key={result.id.value} style={rowStyle}>\n                <img alt={result.name.first} className=\"img-fluid\" src={result.picture.medium} />\n                <td className=\"align-middle\">{result.name.first} {result.name.last}</td>\n                <td className=\"align-middle\">{result.phone}</td>\n                <td className=\"align-middle\">{result.email}</td>\n                <td className=\"align-middle\">{result.dob.date.slice(5, 10)}-{result.dob.date.slice(0, 4)}</td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default ResultList;\n","import axios from \"axios\";\n// https://randomuser.me/api/?results=200&nat=us\nconst BASEURL = \"https://randomuser.me/\";\nconst APIKEY = \"/?results=200&nat=us\";\n\nexport default {\n  search: function(query) {\n    // console.log(BASEURL + query + APIKEY)\n    return axios.get(BASEURL + query + APIKEY);\n  }\n};\n","import React, { Component } from \"react\";\r\nimport Jumbotron from \"./Jumbotron\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport ResultList from \"./ResultList\";\r\nimport API from \"../utils/API\";\r\n\r\nclass EmployeeContainer extends Component {\r\n  \r\n  state = {\r\n    search: \"\",\r\n    results: [],\r\n    copyResults: [],\r\n  };\r\n\r\n   componentDidMount() {\r\n    this.searchEmployees(\"api\");\r\n  }\r\n\r\n  searchEmployees = query => {\r\n    API.search(query)\r\n      .then(res => this.setState({ results: res.data.results, copyResults: res.data.results}))\r\n      // .then(res => this.setState({ results: res.data.results, copyResults:res.data.results },\r\n      // () => console.log(this.state.results)))  w/ console.log\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // gets name and value from SearchForm\r\n  handleInputChange = event => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({\r\n      [name]: value  //search:value\r\n    });\r\n    \r\n    // filters to compare the value is in either first or last name\r\n    const employee = this.state.copyResults.filter(employee => {\r\n      return employee.name.first.toLowerCase().includes(value.toLowerCase())  ||\r\n      employee.name.last.toLowerCase().includes(value.toLowerCase())\r\n    })\r\n    this.setState({results: employee})\r\n  };\r\n\r\n  sortName = event => {\r\n    if (this.state.results === this.state.copyResults) {\r\n    // https://stackoverflow.com/questions/1129216/sort-array-of-objects-by-string-property-value\r\n    // https://www.w3schools.com/jsref/jsref_localecompare.asp\r\n      // const sort =  this.state.copyResults.sort((a, b) => a.name.last.localeCompare(b.name.last));\r\n      // copyResults is rewritten when using localCompare\r\n      const sort = [...this.state.copyResults]\r\n      sort.sort((a, b) => a.name.last.localeCompare(b.name.last))\r\n      // sort creates a copy of the copy and then sorts\r\n      this.setState({results: sort})\r\n    } \r\n    else {\r\n      const unsort = this.state.copyResults\r\n      this.setState({results: unsort})\r\n    }\r\n \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Jumbotron />\r\n        <SearchForm\r\n          search={this.state.search}\r\n          handleInputChange={this.handleInputChange}\r\n        />\r\n        <ResultList \r\n          results={this.state.results} \r\n          sortName={this.sortName}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeContainer;","\n\nimport React from \"react\";\nimport EmployeeContainer from \"./components/EmployeeContainer\";\n\nfunction App() {\n  return <EmployeeContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}