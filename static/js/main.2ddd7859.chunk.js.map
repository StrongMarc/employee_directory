{"version":3,"sources":["components/Jumbotron.js","components/ResultList.js","utils/API.js","components/EmployeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["styles","jumbotronStyle","background","textAlign","Jumbotron","className","style","tableStyle","ResultList","props","scope","results","map","result","key","id","alt","name","first","src","picture","medium","last","phone","email","dob","date","slice","query","axios","get","EmployeeContainer","state","search","searchEmployees","API","then","res","setState","data","console","log","catch","err","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oPAGMA,EAAS,CACbC,eAAgB,CACdC,WAAY,gBACZC,UAAW,WAiBAC,MAbf,WAEE,OACE,6BACE,4BAAQC,UAAU,YAAYC,MAAON,EAAOC,gBAC1C,wBAAII,UAAU,aAAd,sBACA,uBAAGA,UAAU,QAAb,gCCdFL,EAAS,CACbO,WAAY,CACVJ,UAAW,WAoCAK,MAhCf,SAAoBC,GAGlB,OACE,yBAAKJ,UAAU,aAEb,2BAAOA,UAAU,sBAAsBC,MAAON,EAAOO,YACnD,+BACE,4BACE,wBAAIG,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGD,EAAME,QAAQC,KAAI,SAAAC,GAAM,OACrB,wBAAIC,IAAKD,EAAOE,IACd,yBAAKC,IAAKH,EAAOI,KAAKC,MAAOb,UAAU,YAAYc,IAAKN,EAAOO,QAAQC,SACvE,4BAAKR,EAAOI,KAAKC,MAAjB,IAAyBL,EAAOI,KAAKK,MACrC,4BAAKT,EAAOU,OACZ,4BAAKV,EAAOW,OACZ,4BAAKX,EAAOY,IAAIC,KAAKC,MAAM,EAAG,IAA9B,IAAoCd,EAAOY,IAAIC,KAAKC,MAAM,EAAG,Y,iBC1B9D,EACL,SAASC,GAEf,OAAOC,IAAMC,IAND,yBAMeF,EALhB,yBCgDAG,E,4MA5CbC,MAAQ,CACNC,OAAQ,GACRtB,QAAS,I,EAOXuB,gBAAkB,SAAAN,GAChBO,EAAWP,GACRQ,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAE3B,QAAS0B,EAAIE,KAAK5B,UAAW,kBAAM6B,QAAQC,IAAI,EAAKT,MAAMrB,eACtF+B,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,O,kEAN5BC,KAAKV,gBAAgB,S,+BAwBrB,OACE,6BACE,kBAAC,EAAD,MAMA,kBAAC,EAAD,CAAYvB,QAASiC,KAAKZ,MAAMrB,e,GAvCRkC,aCGjBC,MAJf,WACE,OAAO,kBAAC,EAAD,O,MCMWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.2ddd7859.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// https://github.com/why-jay/center-aligning-jumbotron/blob/master/index.jsx\r\nconst styles = {\r\n  jumbotronStyle: {\r\n    background: \"LightSeaGreen\",\r\n    textAlign: 'center',\r\n  }\r\n};\r\n\r\nfunction Jumbotron() {\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"jumbotron\" style={styles.jumbotronStyle}>\r\n        <h1 className=\"display-4\">Employee Directory</h1>\r\n        <p className=\"lead\">Search or filter by name.</p>\r\n      </header>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\n\nconst styles = {\n  tableStyle: {\n    textAlign: 'center',\n  }\n};\n\nfunction ResultList(props) {\n\n  // https://dev.to/abdulbasit313/an-easy-way-to-create-a-customize-dynamic-table-in-react-js-3igg\n  return (\n    <div className=\"container\">\n      \n      <table className=\"table table-striped\" style={styles.tableStyle}>\n        <thead>\n          <tr>\n            <th scope=\"col\">Image</th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Phone</th>\n            <th scope=\"col\">Email</th>\n            <th scope=\"col\">DOB</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.results.map(result => (\n              <tr key={result.id}>\n                <img alt={result.name.first} className=\"img-fluid\" src={result.picture.medium} />\n                <td>{result.name.first} {result.name.last}</td>\n                <td>{result.phone}</td>\n                <td>{result.email}</td>\n                <td>{result.dob.date.slice(5, 10)}-{result.dob.date.slice(0, 4)}</td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default ResultList;\n","import axios from \"axios\";\n// https://randomuser.me/api/?results=200&nat=us\nconst BASEURL = \"https://randomuser.me/\";\nconst APIKEY = \"/?results=200&nat=us\";\n\nexport default {\n  search: function(query) {\n    // console.log(BASEURL + query + APIKEY)\n    return axios.get(BASEURL + query + APIKEY);\n  }\n};\n","import React, { Component } from \"react\";\r\nimport Jumbotron from \"./Jumbotron\";\r\n// import SearchForm from \"./SearchForm\";\r\nimport ResultList from \"./ResultList\";\r\nimport API from \"../utils/API\";\r\n\r\nclass EmployeeContainer extends Component {\r\n  state = {\r\n    search: \"\",\r\n    results: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.searchEmployees(\"api\");\r\n  }\r\n\r\n  searchEmployees = query => {\r\n    API.search(query)\r\n      .then(res => this.setState({ results: res.data.results }, () => console.log(this.state.results)))\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  // handleInputChange = event => {\r\n  //   const name = event.target.name;\r\n  //   const value = event.target.value;\r\n  //   this.setState({\r\n  //     [name]: value\r\n  //   });\r\n  // };\r\n\r\n  // When the form is submitted, search the Giphy API for `this.state.search`\r\n  // handleFormSubmit = event => {\r\n  //   event.preventDefault();\r\n  //   this.searchEmployees(this.state.search);\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Jumbotron />\r\n        {/* <SearchForm\r\n          search={this.state.search}\r\n          handleFormSubmit={this.handleFormSubmit}\r\n          handleInputChange={this.handleInputChange}\r\n        /> */}\r\n        <ResultList results={this.state.results} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EmployeeContainer;","\n\nimport React from \"react\";\nimport EmployeeContainer from \"./components/EmployeeContainer\";\n\nfunction App() {\n  return <EmployeeContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}